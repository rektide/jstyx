<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <author email="jdb@mail.nerc-essc.ac.uk">Jon Blower</author>
    <title>Styx Grid Services Tutorial: Creating more complex services</title>
  </properties>

  <body>
    <section name="Styx Grid Services Tutorial: Creating more complex services">
    <p>We shall now create some Styx Grid Services from 
    programs that are a little more complex than a Hello World program. The process for
    doing so is exactly the same:
    <ol>
        <li>Create a machine-readable description of the program (the configuration file).</li>
        <li>Create and run the SGS server, using this description.</li>
        <li>Run the service using the SGS client software.</li>
    </ol>
    </p>
    <p>This time, we shall look at programs that read input from either a local
    file or the standard input (i.e. the console).</p>
    
    <subsection name="1. A simple filter">
    <p>A filter is simply a program that reads data from its standard input
    and writes to its standard output.  </p>

<p>The first thing that you need to do is to create a configuration file that
    contains a complete description of the HelloWorld program and how to run it.  The HelloWorld
    program reads no input files or command line arguments and simply prints a
    &quot;Hello World&quot; message to the console (i.e. to the standard output stream).
    </p>
    <p>The configuration file for this service is therefore very simple but you don't
    have to write it yourself.  The
    JStyx distribution contains not only a suitable configuration file, but also
    a <a href="../../xref/uk/ac/rdg/resc/jstyx/gridservice/tutorial/HelloWorld.html">HelloWorld program</a>,
    written in Java.  The provided configuration file 
    (the <code>SGSconfig.xml</code> file in the <code>conf</code> directory
    of the distribution) contains descriptions of all the Styx Grid Services that are included in this
    tutorial but we are only interested in the part that describes the
    <code>helloworld</code> service for the moment:</p>
    <source><![CDATA[<gridservice name="helloworld"
    command="JStyxRun uk.ac.rdg.resc.jstyx.gridservice.tutorial.HelloWorld"
    description="Prints Hello World to stdout">
  <outputs>
    <output type="stream" name="stdout"/>
  </outputs>
</gridservice>]]></source>
    <p>This simply specifies that the HelloWorld program is run using the command
    &quot;<code>JStyxRun uk.ac.rdg.resc.jstyx.gridservice.tutorial.HelloWorld</code>&quot;
    and that it prints data to its standard output stream.  (<em>Important note for
    Windows users: the JStyxRun &quot;program&quot; is actually a batch file
    and so cannot be run directly with this command.  You will need to change the <tt>command</tt>
    property for the <code>helloworld</code> SGS to
    &quot;cmd.exe /C JStyxRun uk.ac. ...&quot;.  This is because
    batch files are not executable on their own: they need to be run using the 
    command prompt program.</em>)</p>
    </subsection>
    
    <subsection name="2. Run the server">
    <p>We now need to run the SGS server.  The <code>GridServices</code> script
    runs the <a href="../../xref/uk/ac/rdg/resc/jstyx/gridservice/server/StyxGridService.html">server</a>,
    passing in the <code>SGSconfig.xml</code> file.  Assuming you
    have set your <code>PATH</code> correctly as described in the 
    <a href="../../downloads.html">installation instructions</a>, you can run the
    server simply by entering:</p>
    <source>GridServices</source>
    <p>at a command-line prompt.  If all is well, you will see some debug messages
    printed to the console, including the line &quot;<code>Creating StyxGridService
    called helloworld</code>&quot;.  The final message will read something like
    &quot;<code>Started StyxGridServices, listening on port 9092</code>&quot;.
    See <a href="#5__Changing_the_port_number_of_the_server">below</a> for
    instructions for changing this port number if the default port of 9092 is
    not acceptable for any reason.</p>
    <p>Note that you should <strong>not</strong> run the SGS server as the root
    user for security reasons.</p>
    </subsection>
    
    <subsection name="3. Run the service using the SGSRun program">
    <p>
    We shall now execute the <code>helloworld</code> service.  The SGS distribution
    includes a Java program called <code>SGSRun</code>, which is a generic client
    program for <em>any</em> Styx Grid Service.  It is run from the command line
    like so:
    </p>
    <source><![CDATA[SGSRun <hostname> <port> <servicename> [args]]]></source>
    <p>Open a new command prompt or terminal window.  Assuming that you are
    working on the same machine that is running the SGS server, you can run 
    the <code>helloworld</code> service by entering:</p>
    <source>SGSRun localhost 9092 helloworld</source>
    <p>You should see the &quot;Hello World!&quot; message printed to the
    console window.  The <code>SGSRun</code> program has connected to the server,
    created a new instance of the <code>helloworld</code> service, run the service
    and downloaded the output data, which in this case was just the &quot;Hello World!&quot;
    string.</p>
    </subsection>
    
    <subsection name="4. Create a wrapper script">
    <p>One of the most important features of the SGS system is the ability to
    run remote services exactly as if they were local programs.  The <code>SGSRun</code>
    program gets us most of the way there but we still have to specify the location
    and port number of the server.  Assuming that these are fixed, it is an easy task
    to create a script that wraps the <code>SGSRun</code> program.
    </p>
    <p>On Windows, we can create a batch file called <code>helloworld.bat</code>
    with the following contents:</p>
    <source>@echo off
SGSRun localhost 9092 helloworld</source>
    </subsection>
    <p>On Linux/Unix the file would be a shell script called <code>helloworld</code>:</p>
    <source>#!/bin/sh
SGSRun localhost 9092 helloworld</source>
    <p>The <code>helloworld</code> wrapper script can now be treated exactly
    as if it were a local executable.</p>
    
    <subsection name="5. Exercise: Provide your own Hello World program">
    <p>For convenience, an example HelloWorld program (written in Java) is provided
    with the SGS distribution. This is what we have been using so far.  As an exercise, you might
    like to write a HelloWorld program in your language of choice and run that
    as an SGS instead of the Java program.  For example, if you write and compile a C program
    called <code>helloworld</code> and place it in the <code>/usr/local/bin</code>
    directory, you would change the relevant part of the configuration file to:</p>
    <source><![CDATA[<gridservice name="helloworld"
    command="/usr/local/bin/helloworld"
    description="Prints Hello World to stdout">
  ...
</gridservice>]]></source>
    <p>and stop and restart the server process.</p>
    <p>Java programmers might like to know that the string in the <code>command</code>
    attribute of the <code>&lt;gridservice&gt;</code> tag is passed directly to
    Java's <code>Runtime.getRuntime().exec()</code> method.  The main thing to watch
    out for is that <code>.bat</code> files under Windows cannot be executed directly:
    they must be passed to the <code>cmd.exe</code> (Windows 2000/XP) or
    <code>command.com</code> (Windows 9x) program and so the <code>command</code>
    attribute must read as something like:</p>
    <source>command="cmd.exe /C C:\programs\myscript.bat"</source>
    </subsection>
    </section>
  </body>
</document>
