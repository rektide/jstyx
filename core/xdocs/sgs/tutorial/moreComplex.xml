<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <author email="jdb@mail.nerc-essc.ac.uk">Jon Blower</author>
    <title>Styx Grid Services Tutorial: Creating more complex services</title>
  </properties>

  <body>
    <section name="Styx Grid Services Tutorial: Creating more complex services">
    <p>We shall now create some Styx Grid Services from 
    programs that are a little more complex than a Hello World program. The process for
    doing so is exactly the same:
    <ol>
        <li>Create a machine-readable description of the program (the configuration file).</li>
        <li>Run the SGS server using this description.</li>
        <li>Run the service using the SGS client software.</li>
    </ol>
    </p>
    <p>In this section of the tutorial we shall look at programs that read some
    input and produce some output.</p>
    </section>
    
    <section name="1. A simple filter">
    <p>
    A filter is simply a program that reads data from its standard input
    and writes to its standard output.  Filters are very common in Unix and Linux
    systems.
    </p>
    <p>
    We shall create a Styx Grid Service that wraps a filter program that reads
    lines of text from its standard input, reverses each line and prints the lines
    to the standard output.  As with the HelloWorld program of the first part of 
    this tutorial, this has been implemented in Java in the 
    <a href="../../xref/uk/ac/rdg/resc/jstyx/gridservice/tutorial/Reverse.html">Reverse</a>
    class.
    </p>
    <p>
    In order to deploy this as a Styx Grid Service, we must create an XML description
    of this program.  This is included in the configuration file that is provided
    with the JStyx distribution (the <code>SGSconfig.xml</code> file in the <code>conf/</code>
    directory) but the relevant portion is reproduced here:
    </p>
    <source><![CDATA[<gridservice name="reverse"
    command="JStyxRun uk.ac.rdg.resc.jstyx.gridservice.tutorial.Reverse"
    description="Reads lines of input and outputs them with characters reversed">
  <inputs>
    <input type="stream" name="stdin"/>
  </inputs>
  <outputs>
    <output type="stream" name="stdout"/>
    <output type="stream" name="stderr"/>
  </outputs>
</gridservice>]]></source>
    <p>
    This specifies that the SGS called &quot;reverse&quot; will read data from
    its standard input and write data to its standard output and error streams.
    Run the SGS server by entering:
    </p>
    <source>GridServices</source>
    <p>
    as before.  Assuming that the server has started successfully, you can run the
    service (under Unix or Cygwin) by entering:
    </p>
    <source>cat somefile.txt | SGSRun localhost 9092 reverse</source>
    <p>
    (You may, of course, have to change the hostname and port of the server).
    The pipe operator <code>|</code> redirects the standard output from the <code>cat</code>
    program to the standard input of the <code>SGSRun</code> program.  The
    <code>SGSRun</code> program streams this information to the SGS server,
    which passes it to the <code>reverse</code> program.
    </p>
    <p>
    You can also run this from Windows from a command prompt:
    </p>
    <source>type somefile.txt | SGSRun localhost 9092 reverse</source>
    <p>
    As with the <a href="HelloWorld.html">HelloWorld</a> example, you can create
    a shell script or batch file called &quot;reverse&quot; that runs
    <code>SGSRun</code> with the correct hostname and port.  This script can 
    then be used in exactly the same manner as the Reverse program itself if it
    were installed locally.
    </p>
    </section>
    
    <section name="2. Input and output files">
    <p>
    We shall now create an SGS that behaves much like the <code>reverse</code>
    service from the above section, but works in a slightly different way.  Instead
    of reading data from the standard input and writing to the standard input, our
    new SGS will read data from an input file and output to a different file.  As
    before, it will read each line of text from the file, reverse it and write
    the reversed lines to the output file.
    </p>
    <p>
    The entry in the XML configuration file is slightly more complicated:
    </p>
    <source><![CDATA[<gridservice name="reverse2"
    command="JStyxRun uk.ac.rdg.resc.jstyx.gridservice.tutorial.Reverse"
    description="Reads lines of input and outputs them with characters reversed">
  <params>
    <param name="inputfile" paramType="flaggedOption"
        flag="i" required="yes" description="Name of input file"/>
    <param name="outputfile" paramType="flaggedOption"
        flag="o" required="yes" description="Name of output file"/>
  </params>
  <inputs>
    <input type="fileFromParam" name="inputfile"/>
  </inputs>
  <outputs>
    <output type="fileFromParam" name="outputfile"/>
  </outputs>
</gridservice>]]></source>
    <p>
    (Note that we are using the same Java program: the Reverse class.  If you
    look at the <a href="../../xref/uk/ac/rdg/resc/jstyx/gridservice/tutorial/Reverse.html">code</a>
    for this class you'll see how it works.)  Let's work through this section of 
    the configuration file:
    <ul>
        <li>The <code>&lt;params&gt;</code> section defines the two command-line
        parameters that are understood by the Reverse program.  They are both
        &quot;flaggedOptions&quot;, which means that they are specified through
        the use of command-line flags.  The name of the input file will be given
        by the item following the <code>-i</code> flag and the output file name will
        be given by the item following the <code>-o</code> flag.</li>
        <li>The <code>&lt;inputs&gt;</code> section specifies that the program
        will take a single input file.  The <code>type=&quot;fileFromParam&quot;</code>
        attribute specifies that the name of the input file is given by the
        value of the parameter called <code>&quot;inputfile&quot;</code>, i.e. 
        the value after the <code>-i</code> flag.</li>
        <li>The <code>&lt;outputs&gt;</code> section specifies that the program
        will produce a single output file.  The <code>type=&quot;fileFromParam&quot;</code>
        attribute specifies that the name of the output file is given by the
        value of the parameter called <code>&quot;outputfile&quot;</code>, i.e. 
        the value after the <code>-o</code> flag.</li>
    </ul>
    (See <a href="../config.html">this page</a> for a more complete description of
    the config file specification.)  Having started the SGS server, you can run
    the <code>reverse2</code> service like this:
    </p>
    <source>SGSRun localhost 9092 reverse2 -i somefile.txt -o output.txt</source>
    <p>
    The SGSRun automatically uploads the input file (<code>somefile.txt</code>)
    to the server and downloads the output file (<code>output.txt</code>).
    </p>
    </section>
    
    <section name="3. Fixed-name input and output files">
    <p>
    Sometimes you might want to create an SGS from a program that expects fixed
    names for its input and output files.  For example, the program may always
    read input from a file called <code>input.txt</code> and write output to
    <code>output.txt</code>.  In this case you will not use command-line parameters
    to set the names of the input and output files.
    </p>
    <p>
    To achieve this, in the config file we use the type <code>&quot;file&quot;</code>
    (instead of <code>&quot;fileFromParam&quot;</code> or <code>&quot;stream&quot;</code>)
    to specify the name of the files.  The following piece of XML configures an
    SGS called <code>&quot;replace&quot;</code>, which reads lines of input 
    from an input file called <code>input.txt</code>, replaces all instances
    of one string with another and writes the result to <code>output.txt</code>:
    </p>
    <source><![CDATA[<gridservice name="replace"
    command="JStyxRun uk.ac.rdg.resc.jstyx.gridservice.tutorial.Replace"
    description="Replaces all instances of one string in a file with another">
  <params>
    <param name="stringToFind" paramType="unflaggedOption"
        required="yes" description="String to find"/>
    <param name="stringToReplace" paramType="unflaggedOption"
        required="yes" description="String to replace"/>
    <param name="verbose" paramType="switch" flag="v"
        longFlag="verbose" description="If set true, will print verbose output to stdout"/>
  </params>
  <inputs>
    <input type="file" name="input.txt"/>
  </inputs>
  <outputs>
    <output type="file" name="output.txt"/>
    <output type="stream" name="stdout"/>
    <output type="stream" name="stderr"/>
  </outputs>
</gridservice>]]></source>
    <p>
    Note the use of <code>unflaggedOption</code>s to specify the strings to
    find and replace.  These are command-line arguments that do not use a 
    flag to signal their presence.  Provided that you have a file called
    <code>input.txt</code> in your current directory, you can run the <code>replace</code>
    SGS as follows:
    </p>
    <source>SGSRun localhost 9092 replace hello goodbye</source>
    <p>
    This will replace all instances of the word &quot;hello&quot; with 
    &quot;goodbye&quot; in the file <code>input.txt</code>, writing the results
    to <code>output.txt</code>.  As you may have gathered from the above XML,
    you can use the command-line flag <code>-v</code> (or <code>--verbose</code>)
    to produce more verbose output.
    </p>
    <p>
    Even though the names of the files are fixed, you can still pass references
    to input files and get references to output files.  Type
    <source>SGSRun localhost 9092 replace --sgs-verbose-help</source> and you'll
    see the arguments that you have to set.  For example:
    </p>
    <source>SGSRun localhost 9092 replace hello goodbye
    --sgs-ref-input.txt=readfrom:http://www.google.com --sgs-ref-output.txt</source>
    <p>
    will read input data from http://www.google.com and write a reference to the
    output data into the file <code>output.txt</code>.  (The <code>&quot;readfrom&quot;</code>
    part is actually unnecessary in this case by the way.)  Note that you can also
    use this technique to stream data from a remote source into the standard
    input of an SGS (<code>--sgs-ref-stdin=readfrom:<em>URL</em></code>).
    </p>
    </section>
    
  </body>
</document>
