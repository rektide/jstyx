<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <author email="jdb@mail.nerc-essc.ac.uk">Jon Blower</author>
    <title>JStyx Tutorial: Reading and Writing</title>
  </properties>

  <body>
		
    <section name="Reading and Writing Styx files">
    <p>
    The most common tasks (from the client's point of view at least) in a Styx
    system are reading from and writing to files.
    There are several ways to do this, each with advantages and disadvantages.  In
    this section of the tutorial, we'll go through the options.
    </p>
      
      <subsection name="Setting up">
      <p>
      In all of the examples in this section, we'll use the <a href="../xref/uk/ac/rdg/resc/jstyx/tutorial/SimpleServer.html">SimpleServer</a>
      from <a href="FirstStyxSystem">earlier</a> in this tutorial.  This
      simply serves up a single file that holds its contents in memory.  Run this
      server by running:
      <source>
      JStyxRun uk.ac.rdg.resc.jstyx.tutorial.SimpleServer
      </source>
      from the <code>bin/</code> directory of your JStyx distribution.
      </p>
      <p>
      All the client programs we shall write are based on the <a href="../xref/uk/ac/rdg/resc/jstyx/tutorial/SimpleClient.html">SimpleClient</a>
      from <a href="FirstStyxSystem">earlier</a> in this tutorial.  In each of the
      examples below we shall first write some data to the file on the server, 
      then we shall read it back.  All the functions described below are part of the 
      <a href="../xref/uk/ac/rdg/resc/jstyx/client/CStyxFile.html">CStyxFile</a>
      class.
      </p>
      <p>
      All the code below can be found in the <a href="../xref/uk/ac/rdg/resc/jstyx/tutorial/ReadingAndWriting.html">ReadingAndWriting</a>
      class, including full comments.
      </p>
      </subsection>
    
      <subsection name="getContents() and setContents()">
      <p>
      The easiest way to read from and write to files is to use the <code>getContents()</code>
      and <code>setContents()</code> methods, as used in the original
      <a href="../xref/uk/ac/rdg/resc/jstyx/tutorial/SimpleClient.html">SimpleClient</a>.  These
      methods are suitable if the entire contents of the file can fit sensibly in a String, i.e. for relatively
      small data volumes.
      </p>
      <p>
      In the <a href="../xref/uk/ac/rdg/resc/jstyx/tutorial/ReadingAndWriting.html">ReadingAndWriting</a>,
      class, the <code>main()</code> method makes the connection to the server and gets
      the handle (i.e. a <a href="../xref/uk/ac/rdg/resc/jstyx/client/CStyxFile.html">CStyxFile</a> object)
      to the file on the remote server.  Then it calls the <code>setAndGetContents()</code>
      method, whose contents are very simple:
      <source>
      file.setContents("hello JStyx world");
      System.out.println(file.getContents());
      </source>
      Note that both <code>setContents()</code> and <code>getContents</code> can
      throw <a href="../xref/uk/ac/rdg/resc/jstyx/StyxException.html">StyxException</a>s
      and so we have to catch this or re-throw it from the method.  If you run this code
      the string "hello JStyx world" should be printed out.
      </p>      
      </subsection>
      
      <subsection name="InputStreams and OutputStreams">
      <p>
      Another easy-to-use option for reading and writing is through streams.  This
      is probably one of the most familiar ways of dealing with I/O to Java
      programmers.  In essence, once you have a <a href="../xref/uk/ac/rdg/resc/jstyx/client/CStyxFile.html">CStyxFile</a>
      object you can turn it into an InputStream or OutputStream by using the 
      wrapper classes <a href="../xref/uk/ac/rdg/resc/jstyx/client/CStyxFileInputStream.html">CStyxFileInputStream</a>
      and <a href="../xref/uk/ac/rdg/resc/jstyx/client/CStyxFileOutputStream.html">CStyxFileOutputStream</a>
      respectively.  You can then use standard stream I/O to get data from and to
      the files on the Styx server.
      </p>
      <p>
      Character-based I/O can be achieved by further wrapping
      these streams in <a href="../xref/uk/ac/rdg/resc/jstyx/client/CStyxFileInputStreamReader.html">CStyxFileInputStreamReader</a>
      and <a href="../xref/uk/ac/rdg/resc/jstyx/client/CStyxFileOutputStreamWriter.html">CStyxFileOutputStreamWriter</a>
      objects.  These convert the streams into character streams by using the
      UTF-8 character set.  These Readers and Writers can then be wrapped yet again as BufferedReaders
      and BufferedWriters to allow, for example, reading and writing data a line at a time
      from a remote file.
      </p>
      <p>
      TODO: code example
      </p>
      </subsection>
      
      <subsection name="Using URLs">
      <p>
      You can get a handle to a Styx file on a remote server using a URL.  For
      example, the URL of a file called <code>readme</code> in the root directory
      of a Styx server on <code>localhost</code>, port 9876 would be
      <code>styx://localhost:9876/readme</code>.  You can use this URL to get
      an Input- or OutputStream for interacting with this file, as in this code
      snippet:
      <source>
      URL url = new URL("styx://localhost:9876/readme");
      InputStream is = url.openStream();
      OutputStream os = url.openConnection().getOutputStream();
      </source>
      Note that you do not have to instantiate or open a 
      <a href="../xref/uk/ac/rdg/resc/jstyx/client/StyxConnection.html">StyxConnection</a>
      before you do this. This is done automatically in the protocol handler for 
      the <code>styx://</code> URLs.
      </p>
      <p>
      In order to make Java recognize <code>styx://</code> URLs, you have to add the string 
      <code>uk.ac.rdg.resc.jstyx.client.protocol</code> to the system property
      <code>java.protocol.handler.pkgs</code>.  This is done automatically by the
      JStyxRun script in the <code>bin/</code> directory of the JStyx distribution.
      If you don't set this property, you will get MalformedURLExceptions when
      trying to create URL objects from <code>styx://</code> URLs.
      </p>
      </subsection>
      
      <subsection name="read() and write()">
      <p>
      
      </p>
      </subsection>
      
      <subsection name="Asynchronous reading and writing">
      </subsection>
      
    </section>
    
  </body>
</document>
